{"version":3,"sources":["background.jpg","Header.js","Body.js","Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Header","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","headerColor","clicked","_this2","_this$state","react_default","a","createElement","Fragment","HeaderContainer","color","H1","Nav","Li","A","href","onClick","setState","Component","styled","div","_templateObject","h1","_templateObject2","nav","_templateObject3","li","_templateObject4","_templateObject5","Body","BodyContainer","Body_H1","P","Body_templateObject","Body_templateObject2","Body_templateObject3","Footer","FooterContainer","Footer_Li","Footer_A","Footer_templateObject","Footer_templateObject2","Footer_templateObject3","App","AppContainer","Header_Header","Body_Body","Footer_Footer","Background","src","background","Overlay","App_templateObject","img","App_templateObject2","App_templateObject3","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e896c7f6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/background.e86084e9.jpg\";","import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport { Spring, animated } from 'react-spring/renderprops';\nexport default class Header extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      headerColor: '#00BCFF',\n      clicked: false,\n\n    }\n  }\n  render() {\n    const { headerColor, clicked } = this.state;\n    return (\n      <>\n        <HeaderContainer\n          clicked={clicked}\n          color={clicked ? headerColor : ''}>\n        <H1 color={headerColor}>JP</H1>\n        <Nav>\n          <Li\n          \n            color='#FFCC54'\n            ><A href='#About'  onClick={() => this.setState({ headerColor: '#FFCC54', clicked: true })}>About</A></Li>\n          <Li color='#0DD269'><A href='#Projects' onClick={() => this.setState({ headerColor: '#0DD269'})}>Projects</A></Li>\n          <Li color='#FF5F5F'><A href='#Cooking' onClick={() => this.setState({ headerColor: '#FF5F5F'})}>Cooking</A></Li>\n          <Li color='#913CFF'><A href='#Contact' onClick={() => this.setState({ headerColor: '#913CFF'})}>Contact</A></Li>\n        </Nav>\n\n        </HeaderContainer>\n        </>\n    )\n  }\n}\n\nconst HeaderContainer = styled.div`\ndisplay: flex;\ntransition: background-color 1s ease;\ntransition: padding 1s ease;\nbackground: ${props => props.color};\njustify-content: space-between;\nalign-content: center;\nalign-items: center;\n\npadding: ${props => props.clicked ? 0 : '20px'};\n  grid-area: 1 / 1 / 2 / -1;\n`\nconst H1 = styled.h1`\n  padding: 10px;\n  transition: background-color 1s ease;\n  background: ${props => props.color};\n  margin:0px;\n  font-size: 20px;\n  cursor: pointer;\n`\n\nconst Nav = styled.nav`\ndisplay: flex;\nheight: 100%;\n`\n\nconst Li = styled.li`\n  @import url('https://fonts.googleapis.com/css?family=Oswald');\n  font-family: Oswald;\n  display: inline;\n  transition: height 1s ease;\n  padding: 22px 10px 21px;\n  align-self: center;\n  text-transform: uppercase;\n  ${props => props.clicked ? 'height:100%' : ''};\n  :hover {\n    background: ${props => props.color};\n  }\n`\nconst A = styled.a`\ncolor: white;\n  height: 100%;\ntext-decoration: none;\n`","import React, { Component } from 'react'\nimport styled from 'styled-components';\n\nexport default class Body extends Component {\n  render() {\n    return (\n      <BodyContainer>\n        <H1>I am Joseph Pilla</H1>\n        <P>A full stack web developer</P>\n      </BodyContainer>\n    )\n  }\n}\n\nconst BodyContainer = styled.div`\n  position: relative;\n  padding: 0 20% 30%;\n  display: flex; \n  flex-direction: column;\n  align-self: center;\n  grid-area: 2 / 1 / 3 / -1;\n`\nconst H1 = styled.h1`\n  @import url('https://fonts.googleapis.com/css?family=Roboto');\n  font-family: Roboto;\n margin:0px;\n font-size: 3rem;\n`\n\nconst P = styled.p`\n  @import url('https://fonts.googleapis.com/css?family=Open+Sans');\n  font-family: Open Sans;\n  margin: 0px;\n`\n","import React, { Component } from 'react'\nimport styled from 'styled-components';\n\nexport default class Footer extends Component {\n  render() {\n    return (\n      <FooterContainer>\n        <nav>\n          <Li color='#3b5998'><A href='https://www.facebook.com/joey.pilla'>Facebook</A></Li>\n          <Li color='#6cc644'><A href='https://github.com/JoeyPilla'>Github</A></Li>\n          <Li color='#833AB4'><A href='https://www.instagram.com/joey_pilla6/'>Instagram</A></Li>\n        </nav>\n      </FooterContainer>\n    )\n  }\n}\n\nconst FooterContainer = styled.div`\n  grid-area: 3 / 1 / 4 / -1;\n  display: flex;\n  align-items: flex-end;\n  justify-content: center;\n  padding: 20px;\n`\n\nconst Li = styled.li`\n  background: ${props => props.color}\n  display: inline;\n  padding: 10px;\n`\n\nconst A = styled.a`\ncolor: white;\ntext-decoration: none;\n`","import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport Header from './Header';\nimport Body from './Body';\nimport Footer from './Footer';\nimport background from './background.jpg';\nclass App extends Component {\n  render() {\n    return (\n      <>\n        <AppContainer>\n          <Header />\n          <Body />\n          <Footer />\n          <Background src={background} />\n          <Overlay/>\n        </AppContainer>\n      </>\n    );\n  }\n}\n\nconst AppContainer = styled.div`\n  display: grid;\n  color: white;\n  grid-template: 100px 1fr 50px / auto;\n  height: 100vh;\n  width: 100vw;\n`\n\nconst Background = styled.img`\n  grid-area: 1 / 1 / -1 / -1;\n  height: 100%;\n  width: 100%;\n  filter: contrast(1);\n  z-index: -2;\n  object-fit: cover;\n`\nconst Overlay = styled.div`\n  grid-area: 1 / 1 / -1 / -1;\n  height: 100%;\n  width: 100%;\n  opacity: .7;\nbackground-color: black;\n  z-index: -1;\n`\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}